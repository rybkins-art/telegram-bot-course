const https = require('https');
const fs = require("fs");
const TelegramApi = require('node-telegram-bot-api')
const { gameOptions, againOptions, types } = require('./options');
const { clearInterval } = require('timers');

const token = '6946681054:AAEOvH7d7xwKsZcceD5i9pabun0RExgKtFw'



const bot = new TelegramApi(token, { polling: true })

let BTCWallet = '';
let price = 0;
let course = {};
const commission = 0.2;
let isStelsNotes = false;
let stelsNotes = [];
let temporaryMsgIDs = [];
let autoHideNotesID = 0;

function between(min, max) {
    return Math.floor(
        Math.random() * (max - min) + min
    )
}

function isNumber(value) {
    return typeof value === 'number' && isFinite(value) && value > 0;
}

function isFloat(n){
    return Number(n) === n && n % 1 !== 0;
}
    

async function getCourse() {
    const apiUrl = 'https://api.coinbase.com/v2/prices/BTC-RUB/spot';
    let getCoursePromise = new Promise((resolve, reject) => {
        var data = '';
        https.get(apiUrl, res => {
            res.on('data', chunk => { data += chunk }) 
            res.on('end', () => {
               resolve(data);
            })
        }) 
    });

    const response = await getCoursePromise;
    data = JSON.parse(response);
    course = data.data;
}

const start = async () => {
    getCourse();

    bot.setMyCommands([
        { command: '/start', description: '‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
        { command: '/help', description: 'üôè –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç' },
        /* {command: '/info', description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'},
        {command: '/game', description: '–ò–≥—Ä–∞ —É–≥–∞–¥–∞–π —Ü–∏—Ñ—Ä—É'}, */
    ])

    bot.on('message', async msg => {
        const text = msg.text;
        const chatId = msg.chat.id;
        const message_id = msg.message_id;
        const isStart = text === '/start' || text === '–û—Ç–º–µ–Ω–∞';
        const autoHideNotes = 5 * 60 * 1000;

        const mainMenu = {
            reply_markup: {
                keyboard: [
                    ['‚úÖ –ü–æ–ø–æ–ª–Ω–∏—Ç—å', 'üà∫ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å'],
                    ['ü•∑ –ú–æ–∏ –∑–∞—è–≤–∫–∏', '‚ùì –ü–æ–º–æ—â—å'],
                    ['–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏']
                ],
                resize_keyboard: true
            }
        }

        if (!msg.text) {
            return;
        }

        if (isStelsNotes) {
            clearTimeout(autoHideNotesID);
            autoHideNotesID = setTimeout(hideNotes, autoHideNotes);
        }
        

        function clearStels() {
            stelsNotes.forEach(item => {
                try {
                    bot.deleteMessage(chatId, item.id);
                } catch (error) {
                    console.log(error)
                }
            });
            temporaryMsgIDs.forEach(id => {
                try {
                    bot.deleteMessage(chatId, id);
                } catch (error) {
                    console.log(error)
                }
            });
        }

        async function showNotes() {
            try {
                const res = await bot.sendMessage(chatId, `–†–µ–∂–∏–º –∑–∞–º–µ—Ç–æ–∫. –î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –∑–∞–º–µ—Ç–∫–∏. \n\n –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å. \n\n –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω, –ø—Ä–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏ –≤ —á–∞—Ç–µ`, {
                    reply_markup: {
                        keyboard: [
                            ['–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ —Å–∫—Ä—ã—Ç—å'],
                            ['–û—Ç–º–µ–Ω–∞'],
                        ],
                        resize_keyboard: true
                    }
                });
                temporaryMsgIDs.push(res.message_id)
            } catch (error) {
                console.log(error);
                return;
            }
        }

        async function hideNotes() {
            clearStels();
            startMenu();

            return;
        }

        async function startMenu() {
            // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            await bot.sendSticker(chatId, 'https://media.stickerswiki.app/moneybitcoin_byalexzhdanov/6412776.512.webp')
            bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç!  ${msg.from.first_name} ü§ù \n\n –°–∞–º—ã–π –í—ã–≥–æ–¥–Ω—ã–π –∏ –ë—ã—Å—Ç—Ä—ã–π –æ–±–º–µ–Ω –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ! \nü§∑ –í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º –∏–ª–∏ –≤–æ–ø—Ä–æ—Å /help
‚öôÔ∏è –ï—Å–ª–∏ –∑–∞–≤–∏—Å –±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π /start`);
            
            // –ú–µ–Ω—é
            await bot.sendMessage(chatId, '–£–≤–µ—Ä–µ–Ω, –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ü–æ–¥—Ä—É–∂–∏–º—Å—è!', mainMenu);
        }

        if (isStart) {
            bot.deleteMessage(chatId, message_id);
            clearStels();
            isStelsNotes = false;

            startMenu();
            return;
        }

        if (text === '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏') {
            temporaryMsgIDs.push(message_id);
            clearStels();
            
            stelsNotes = [];
            const res = await bot.sendMessage(chatId, '–ó–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã');
            temporaryMsgIDs.push(res.message_id);

            setTimeout(async () => {
                hideNotes();
            }, 3000);

            return;
        }

        if (text === '–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–º–µ—Ç–∫–∏') {
            temporaryMsgIDs.push(message_id);

            try {
                async function forEachStels(item) {
                    if (!item) {
                        return;
                    }
                    if (item.msg) {
                        const res = await bot.sendMessage(chatId, item.msg.text);
                        temporaryMsgIDs.push(res.message_id);
                    }
                    if (item.img) {
                        //bot.sendPhoto(chatId, './image/file_0.jpg');
    
                        const photoId = item.img.photo[item.img.photo.length-1].file_id;
    
                        const imageStream = fs.createReadStream('./image/' + photoId + '.jpg');
                        const res = await bot.sendPhoto(chatId, imageStream, {
    
                            caption: item.img.caption,
                            parse_mode: 'HTML'
    
                        });

                        temporaryMsgIDs.push(res.message_id)
                    }

                    const indexStels = stelsNotes.indexOf(item);
                    const nextIndex = indexStels + 1;
                    if (nextIndex < stelsNotes.length) {
                        forEachStels(stelsNotes[nextIndex]);
                    }
                }

                forEachStels(stelsNotes[0]);
                
                if (!stelsNotes.length) {
                    await bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –ø—É—Å—Ç');
                }
                bot.deleteMessage(chatId, message_id);
                return;
            } catch (error) {
                console.log(error)
            }

            return;
        }

        if (text === '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ —Å–∫—Ä—ã—Ç—å') {
            isStelsNotes = false;
            temporaryMsgIDs.push(message_id);
            clearTimeout(autoHideNotesID);

            const res = await bot.sendMessage(chatId, '–ó–∞–º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            temporaryMsgIDs.push(res.message_id);

            setTimeout(async () => {
                hideNotes();
            }, 3000);
            return;
        }

        if (text === '–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏') {
            isStelsNotes = true;
            temporaryMsgIDs.push(message_id);

            showNotes();
            return;
        }

        if (isStelsNotes) {
            stelsNotes.push({
                id: msg.message_id,
                msg,
            });

            return;
            //isStelsNotes = false;
        }

        console.log(`${msg.from.username}: ${msg.text}`)

        try {
            //getCourse();
            if (text.includes('–ú–æ–∏ –∑–∞—è–≤–∫–∏')) {
                return bot.sendMessage(chatId, `–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –≤—Å–µ –±—É–¥–µ—Ç –ø–∞—Ü–∞–Ω—ã`);
            }

            if (text.includes('–ü–æ–ø–æ–ª–Ω–∏—Ç—å')) {
                return bot.sendMessage(chatId, `üëõ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å BTC –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å`);
            }

            if (text.includes('–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å')) {
                let currentCourse = (parseFloat(course.amount)).toFixed(2)
                return bot.sendMessage(chatId, `–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 ‚Çø = ${currentCourse}`);
            }


            // –ü–∞—Ä—Å–∏–º –∫–æ—à–µ–ª–µ–∫
            if (!!~text.search(/^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$/g)) {
                BTCWallet = text;
                return bot.sendMessage(chatId, `üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å. –í —Ä—É–±–ª—è—Ö –∏–ª–∏ –±–∏—Ç–∫–æ–∏–Ω–∞—Ö. \n\n –¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: ${commission*100}%`);
            }

            // –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
            if ( isNumber(parseInt(text)) || isFloat(parseFloat(text)) ) {
                if (!BTCWallet) {
                    return bot.sendMessage(chatId, `üëõ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å BTC –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å`);
                }

                let wallet2BTC = '';
                let BTC2rub = '';

                if ( isNumber(parseInt(text)) ) {
                    if ( parseInt(text) < 2000 ) {
                        return bot.sendMessage(chatId, `‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞ 2000 ‚ÇΩ`);
                    }

                    BTC2rub = parseInt(text);
                    price = BTC2rub;

                    wallet2BTC = (1 / course.amount * price) + '';
                    wallet2BTC = wallet2BTC.substring(0, 10);
                    wallet2BTC = `${parseFloat(wallet2BTC)} BTC`
                    
                    cW = '‚ÇΩ'

                } else if ( isFloat(parseFloat(text)) ) {
                    let minBTC =  (1 / course.amount * 2000) + '';
                    minBTC = minBTC.substring(0, 10);
                    minBTC = parseFloat(minBTC);

                    if ( course.amount * parseFloat(text) < 2000 ) {
                        return bot.sendMessage(chatId, `‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞ ${minBTC} BTC`);
                    }

                    BTC2rub = Math.floor( price / (1 / course.amount ) );

                    price = parseFloat(text); 
                    wallet2BTC = price;
                    cW = 'BTC'
                }

                BTC2rubCom = BTC2rub + BTC2rub * commission;
                
                bot.sendMessage(chatId, `–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞: üëõ <b>${BTCWallet}</b> \n\n üí∞–ù–∞ —Å—É–º–º—É: ${BTC2rub} —Ä—É–±. \n\n –ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É: <code>5536 9141 7151 6218</code> \n\n ${BTC2rubCom} —Ä—É–± - –∫–æ–º–∏—Å—Å–∏—è ${commission * 100}% \n\n –í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞ —Å—á–µ—Ç: ${wallet2BTC}`, { parse_mode: "HTML" });
            }
            
            if (text === '/help' || text.includes('–ü–æ–º–æ—â—å')) {
                return bot.sendMessage(chatId, `–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±–º–µ–Ω–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @dmitriyrybkins`);
            }
        } catch (e) {
            console.log(e)
            return bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞..)');
        }

    });

    bot.on('photo', async img => {
        const chatId = img.chat.id;

        const downloadFolder = './image';
        if (isStelsNotes) {
            stelsNotes.push({
                id: img.message_id,
                img,
            });
        }

        try {
            //await bot.downloadFile(img.photo[img.photo.length-1].file_id, './image');
            const photoId = img.photo[img.photo.length-1].file_id;
            await bot.downloadFile(photoId, downloadFolder).then(function (filePath) {

                let absoluteFile = downloadFolder + '/' + photoId +'.jpg';
            
                fs.rename(filePath, absoluteFile, function (err, response) {
            
                    console.log(absoluteFile);
            
                    if (err) {
                        return console.log(err);
                    }
            
                });
            });
        }
        catch(error) {
            console.log(error);
        }
    });
}

start();
